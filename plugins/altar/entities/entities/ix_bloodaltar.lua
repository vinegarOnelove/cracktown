AddCSLuaFile()

ENT.Base = "base_anim"
ENT.Type = "anim"
ENT.PrintName = "–ö—Ä–æ–≤–∞–≤—ã–π –ê–ª—Ç–∞—Ä—å"
ENT.Category = "Helix"
ENT.Spawnable = true
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.AutomaticFrameAdvance = true

-- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∞–ª—Ç–∞—Ä—è (–¥—É–±–ª–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
local altarStatusText = {
    ["Idle"] = "–û–∂–∏–¥–∞–µ—Ç",
    ["Accepting"] = "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∂–µ—Ä—Ç–≤—É", 
    ["Blessing"] = "–î–∞—Ä—É–µ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ",
    ["Cooldown"] = "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞"
}

function ENT:SetupDataTables()
    self:NetworkVar("String", 0, "Status")
    self:NetworkVar("Int", 1, "Cooldown")
    self:NetworkVar("Int", 2, "TotalBlessings")
end

if SERVER then
    function ENT:Initialize()
        self:SetModel("models/props_c17/gravestone001a.mdl")
        self:SetSolid(SOLID_VPHYSICS)
        self:PhysicsInit(SOLID_VPHYSICS)
        self:SetUseType(SIMPLE_USE)

        local physObj = self:GetPhysicsObject()
        if IsValid(physObj) then
            physObj:EnableMotion(true)
            physObj:Wake()
        end

        self:SetStatus("Idle")
        self:SetCooldown(0)
        self:SetTotalBlessings(0)
        
        -- –≠—Ñ—Ñ–µ–∫—Ç—ã –∞–ª—Ç–∞—Ä—è
        self:SetMaterial("models/shiny")
        self:SetColor(Color(150, 0, 0))
    end

    -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–≥–∏–Ω—É
    function ENT:GetAltarPlugin()
        return ix.plugin.list["altar"] or ix.plugin.list["bloodaltar"] or ix.plugin.list["blood_altar"]
    end

    function ENT:StartCooldown()
        self:SetStatus("Cooldown")
        self:SetCooldown(CurTime() + 300) -- 5 –º–∏–Ω—É—Ç cooldown
        
        timer.Simple(300, function()
            if IsValid(self) then
                self:SetStatus("Idle")
                self:SetCooldown(0)
            end
        end)
    end

    function ENT:CanAcceptSacrifice(ply)
        if self:GetStatus() == "Cooldown" then
            local timeLeft = math.ceil(self:GetCooldown() - CurTime())
            ply:Notify("–ê–ª—Ç–∞—Ä—å –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è! –û—Å—Ç–∞–ª–æ—Å—å: " .. timeLeft .. "—Å")
            return false
        end
        
        if self:GetStatus() == "Blessing" then
            ply:Notify("–ê–ª—Ç–∞—Ä—å —É–∂–µ –¥–∞—Ä—É–µ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ!")
            return false
        end
        
        return true
    end

    -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π
    function ENT:GetAvailableBlessings(ply)
        local char = ply:GetCharacter()
        local available = {}
        
        -- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–≥–∏–Ω—É
        local altarPlugin = self:GetAltarPlugin()
        if not altarPlugin or not altarPlugin.altarBlessings then
            ply:Notify("–°–∏—Å—Ç–µ–º–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            return available
        end
        
        for blessingID, blessing in pairs(altarPlugin.altarBlessings) do
            local currentLevel = char:GetData("altar_" .. blessingID, 0)
            if currentLevel < blessing.maxLevel then
                table.insert(available, {
                    id = blessingID,
                    data = blessing,
                    level = currentLevel + 1
                })
            end
        end
        
        return available
    end

    -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ—Ä—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    function ENT:HasSacrificeItems(ply, cost)
        if not IsValid(ply) or not ply:GetCharacter() then return false end
        if type(cost) ~= "table" then return false end
        
        local char = ply:GetCharacter()
        local inv = char:GetInventory()
        if not inv then return false end
        
        for itemID, requiredAmount in pairs(cost) do
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            if not ix.item.Get(itemID) then
                print("[BloodAltar] Invalid item ID: " .. tostring(itemID))
                return false
            end
            
            -- –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            local actualAmount = inv:GetItemCount(itemID)
            
            if actualAmount < requiredAmount then
                return false
            end
        end
        
        return true
    end

    -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê—è –§–£–ù–ö–¶–ò–Ø: –ó–∞–±–æ—Ä –∂–µ—Ä—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    function ENT:TakeSacrificeItems(ply, cost)
        if not IsValid(ply) or not ply:GetCharacter() then return end
        if type(cost) ~= "table" then return end
        
        local char = ply:GetCharacter()
        local inv = char:GetInventory()
        if not inv then return end
        
        for itemID, amount in pairs(cost) do
            -- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
            for i = 1, amount do
                local item = inv:HasItem(itemID)
                if item then
                    item:Remove()
                else
                    print("[BloodAltar] Failed to remove item: " .. itemID)
                    break
                end
            end
        end
    end

    -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
    function ENT:ApplyBlessing(ply, blessingID, level)
        local char = ply:GetCharacter()
        if not char then return end
        
        -- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–≥–∏–Ω—É
        local altarPlugin = self:GetAltarPlugin()
        if not altarPlugin or not altarPlugin.altarBlessings then
            ply:Notify("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π!")
            return
        end
        
        local blessing = altarPlugin.altarBlessings[blessingID]
        if not blessing then
            ply:Notify("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ!")
            return
        end
        
        char:SetData("altar_" .. blessingID, level)
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
        if blessingID == "health" then
            local bonusHealth = 25 * level
            char:SetData("altar_health_bonus", bonusHealth)
            
        elseif blessingID == "stamina" then
            local bonusStamina = 0.2 * level
            char:SetData("altar_stamina_bonus", bonusStamina)
            
        elseif blessingID == "strength" then
            local bonusDamage = 0.15 * level
            char:SetData("altar_strength_bonus", bonusDamage)
            
        elseif blessingID == "speed" then
            local bonusSpeed = 0.1 * level
            char:SetData("altar_speed_bonus", bonusSpeed)
        end
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not char:GetData("altarBlessings", false) then
            char:SetData("altarBlessings", {})
        end
        
        local blessings = char:GetData("altarBlessings")
        blessings[blessingID] = level
        char:SetData("altarBlessings", blessings)
    end

    function ENT:Use(ply)
        if CurTime() < (self.nextUse or 0) then return end
        self.nextUse = CurTime() + 1

        if not self:CanAcceptSacrifice(ply) then return end

        local char = ply:GetCharacter()
        if not char then return end

        -- –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
        local availableBlessings = self:GetAvailableBlessings(ply)
        
        if #availableBlessings == 0 then
            ply:Notify("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –≤—Å–µ—Ö –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π!")
            return
        end

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∂–µ—Ä—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        local hasSacrifice = false
        local possibleBlessings = {}

        for _, blessing in ipairs(availableBlessings) do
            if self:HasSacrificeItems(ply, blessing.data.cost) then
                hasSacrifice = true
                table.insert(possibleBlessings, blessing)
            end
        end

        if not hasSacrifice then
            ply:Notify("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∂–µ—Ä—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")
            return
        end

        -- –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ
        if #possibleBlessings == 1 then
            local blessing = possibleBlessings[1]
            self:PerformSacrifice(ply, blessing)
            return
        end

        -- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
        net.Start("BloodAltarOpenMenu")
            net.WriteUInt(#possibleBlessings, 4)
            for _, blessing in ipairs(possibleBlessings) do
                net.WriteString(blessing.id)
                net.WriteString(blessing.data.name)
                net.WriteString(blessing.data.description)
                net.WriteUInt(blessing.level, 2)
            end
        net.Send(ply)
    end

    function ENT:PerformSacrifice(ply, blessing)
        self:SetStatus("Accepting")
        
        -- –ó–∞–±–∏—Ä–∞–µ–º –∂–µ—Ä—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self:TakeSacrificeItems(ply, blessing.data.cost)
        
        -- –≠—Ñ—Ñ–µ–∫—Ç—ã –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è
        self:EmitSound("ambient/creatures/teddy.wav", 75, 100)
        
        -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–º–µ—Å—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü
        local effect = EffectData()
        effect:SetOrigin(self:GetPos() + Vector(0, 0, 30))
        effect:SetColor(255)
        effect:SetScale(2)
        util.Effect("BloodImpact", effect)
        
        ply:Notify("–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–ª—Ç–∞—Ä—å –¥–∞—Ä—É–µ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ...")
        
        timer.Simple(3, function()
            if IsValid(self) and IsValid(ply) then
                self:SetStatus("Blessing")
                
                -- –ü—Ä–∏–º–µ–Ω—è–µ–º –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ
                self:ApplyBlessing(ply, blessing.id, blessing.level)
                
                -- –≠—Ñ—Ñ–µ–∫—Ç—ã –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
                self:EmitSound("ambient/energy/zap9.wav", 85, 100)
                
                -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                local effect = EffectData()
                effect:SetOrigin(self:GetPos() + Vector(0, 0, 40))
                effect:SetMagnitude(3)
                effect:SetScale(1)
                util.Effect("cball_explode", effect)
                
                -- –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
                ply:Notify("–í—ã –ø–æ–ª—É—á–∏–ª–∏: " .. blessing.data.name .. " (–£—Ä–æ–≤–µ–Ω—å " .. blessing.level .. ")")
                
                -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π
                self:SetTotalBlessings(self:GetTotalBlessings() + 1)
                
                -- Cooldown
                timer.Simple(2, function()
                    if IsValid(self) then
                        self:StartCooldown()
                    end
                end)
            end
        end)
    end

    -- –°–µ—Ç–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    util.AddNetworkString("BloodAltarOpenMenu")
    util.AddNetworkString("BloodAltarChooseBlessing")

    net.Receive("BloodAltarChooseBlessing", function(len, ply)
        local altar = net.ReadEntity()
        local blessingID = net.ReadString()
        
        if IsValid(altar) and altar:GetClass() == "ix_bloodaltar" then
            local availableBlessings = altar:GetAvailableBlessings(ply)
            
            for _, blessing in ipairs(availableBlessings) do
                if blessing.id == blessingID and altar:HasSacrificeItems(ply, blessing.data.cost) then
                    altar:PerformSacrifice(ply, blessing)
                    return
                end
            end
            
            ply:Notify("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏ —ç—Ç—É –∂–µ—Ä—Ç–≤—É!")
        end
    end)
end

if CLIENT then
    function ENT:Initialize()
        self.statusInitialized = false
        self.lastStatusCheck = 0
    end

    function ENT:Think()
        if CurTime() > self.lastStatusCheck + 1 then
            self.lastStatusCheck = CurTime()
            
            if isfunction(self.GetStatus) and self:GetStatus() then
                self.statusInitialized = true
            end
        end
        
        -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–ê–†–¢–ò–ö–õ–´: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
        if self.statusInitialized and self:GetStatus() ~= "Idle" then
            if not self.nextParticle or CurTime() > self.nextParticle then
                self.nextParticle = CurTime() + 2.0  -- –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
                if not ParticleEffectNames or table.Count(ParticleEffectNames) >= 500 then
                    return  -- –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Å—Ç–∏—Ü—ã –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
                end
                
                local pos = self:GetPos() + Vector(math.Rand(-20,20), math.Rand(-20,20), 40)
                
                -- üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
                if ParticleEffectNames and ParticleEffectNames["blood_impact"] then
                    local effect = EffectData()
                    effect:SetOrigin(pos)
                    effect:SetColor(255)
                    effect:SetScale(1)
                    util.Effect("blood_impact", effect)
                else
                    -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –¥–µ–∫–∞–ª–∏ –∫—Ä–æ–≤–∏
                    util.Decal("Blood", pos, pos + Vector(0, 0, 10))
                end
            end
        end
        
        self:NextThink(CurTime() + 0.5)
        return true
    end

    function ENT:Draw()
        self:DrawModel()
        
        if not self.statusInitialized then return end
        
        local distance = self:GetPos():Distance(LocalPlayer():GetPos())
        if distance > 300 then return end
        
        local status = self:GetStatus() or "Idle"
        local localizedStatus = altarStatusText[status] or status
        
        local ang = self:GetAngles()
        ang:RotateAroundAxis(ang:Up(), 90)
        ang:RotateAroundAxis(ang:Forward(), 90)
        
        local pos = self:GetPos() + self:GetUp() * 70 + self:GetForward() * 5
        
        cam.Start3D2D(pos, ang, 0.1)
            -- –§–æ–Ω
            draw.RoundedBox(8, -60, -25, 120, 40, Color(0, 0, 0, 230))
            
            -- –†–∞–º–∫–∞ (–∫—Ä–æ–≤–∞–≤–∞—è)
            surface.SetDrawColor(150, 0, 0, 255)
            surface.DrawOutlinedRect(-60, -25, 120, 40, 2)
            
            -- –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            draw.SimpleText(localizedStatus, "DermaDefaultBold", 0, -8, 
                Color(255, 100, 100), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            
            -- Cooldown
            if status == "Cooldown" then
                local timeLeft = math.ceil(self:GetCooldown() - CurTime())
                draw.SimpleText("–û—Å—Ç–∞–ª–æ—Å—å: " .. timeLeft .. "—Å", "DermaDefault", 0, 8, 
                    Color(200, 150, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            end
            
            -- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π
            if self:GetTotalBlessings() > 0 then
                draw.SimpleText("ü©∏ " .. self:GetTotalBlessings(), "DermaDefault", 50, -20, 
                    Color(255, 50, 50), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            end
        cam.End3D2D()
    end

    -- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
    net.Receive("BloodAltarOpenMenu", function()
        local count = net.ReadUInt(4)
        local blessings = {}
        
        for i = 1, count do
            table.insert(blessings, {
                id = net.ReadString(),
                name = net.ReadString(),
                description = net.ReadString(),
                level = net.ReadUInt(2)
            })
        end
        
        local frame = vgui.Create("DFrame")
        frame:SetSize(400, 300)
        frame:SetTitle("–ö—Ä–æ–≤–∞–≤—ã–π –ê–ª—Ç–∞—Ä—å - –í—ã–±–æ—Ä –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è")
        frame:Center()
        frame:MakePopup()
        
        local scroll = vgui.Create("DScrollPanel", frame)
        scroll:Dock(FILL)
        
        for _, blessing in ipairs(blessings) do
            local btn = scroll:Add("DButton")
            btn:Dock(TOP)
            btn:DockMargin(5, 5, 5, 0)
            btn:SetTall(60)
            btn:SetText("")
            
            btn.Paint = function(self, w, h)
                surface.SetDrawColor(50, 0, 0, 200)
                surface.DrawRect(0, 0, w, h)
                
                surface.SetDrawColor(150, 0, 0, 255)
                surface.DrawOutlinedRect(0, 0, w, h)
                
                draw.SimpleText(blessing.name, "DermaDefaultBold", 10, 10, Color(255, 100, 100))
                draw.SimpleText(blessing.description, "DermaDefault", 10, 30, Color(200, 150, 150))
                draw.SimpleText("–£—Ä–æ–≤–µ–Ω—å " .. blessing.level, "DermaDefault", w - 10, 10, Color(255, 100, 100), TEXT_ALIGN_RIGHT)
            end
            
            btn.DoClick = function()
                frame:Close()
                net.Start("BloodAltarChooseBlessing")
                    net.WriteEntity(LocalPlayer():GetEyeTrace().Entity)
                    net.WriteString(blessing.id)
                net.SendToServer()
            end
        end
    end)

    -- Tooltip
    hook.Add("PopulateEntityInfo", "ixBloodAltarInfo", function(tooltip, ent)
        if not IsValid(ent) then return end
        if not isfunction(ent.GetClass) then return end
        if ent:GetClass() ~= "ix_bloodaltar" then return end
        
        local status = ent:GetStatus() or "Idle"
        
        -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
        local name = tooltip:AddRow("name")
        name:SetText("–ö—Ä–æ–≤–∞–≤—ã–π –ê–ª—Ç–∞—Ä—å")
        name:SetBackgroundColor(Color(50, 0, 0))
        name:SetImportant()
        name:SizeToContents()
        
        -- –°—Ç–∞—Ç—É—Å
        local statusRow = tooltip:AddRow("status")
        statusRow:SetText("–°—Ç–∞—Ç—É—Å: " .. (altarStatusText[status] or status))
        statusRow:SetBackgroundColor(Color(30, 0, 0))
        statusRow:SizeToContents()
        
        -- –û–ø–∏—Å–∞–Ω–∏–µ
        local desc = tooltip:AddRow("description")
        desc:SetText("–ü—Ä–∏–Ω–µ—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –≤ –∂–µ—Ä—Ç–≤—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—á–Ω—ã—Ö —É—Å–∏–ª–µ–Ω–∏–π")
        desc:SetBackgroundColor(Color(40, 0, 0))
        desc:SizeToContents()
        
        -- Cooldown
        if status == "Cooldown" then
            local timeLeft = math.ceil(ent:GetCooldown() - CurTime())
            local cdRow = tooltip:AddRow("cooldown")
            cdRow:SetText("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " .. timeLeft .. " —Å–µ–∫—É–Ω–¥")
            cdRow:SetBackgroundColor(Color(60, 0, 0))
            cdRow:SizeToContents()
        end
    end)
end